// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use hhdemo_core::PublicJournalData;
use methods::{HHDEMOGUEST_ELF, HHDEMOGUEST_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use std::time::Instant;

fn main() {
    println!("Enter birth day: ");
    let birthday: u32 = {
        let input = read_line();
        input.parse().expect("Please enter a valid day")
    };

    println!("Enter birth month: ");
    let birthmonth: u32 = {
        let input = read_line();
        input.parse().expect("Please enter a valid month")
    };

    println!("Enter birth year: ");
    let birthyear: u32 = {
        let input = read_line();
        input.parse().expect("Please enter a valid year")
    };

    println!(
        "Generating proof for birth date: {}-{}-{}",
        birthday, birthmonth, birthyear
    );

    // Added cargo dependency for chrono
    use chrono::prelude::*;
    let today = Local::now();

    // ================ Start Timer ================

    let now = Instant::now();

    let env = ExecutorEnv::builder()
        .write_slice(&[birthday, birthmonth, birthyear])
        .write_slice(&[today.day(), today.month(), today.year().try_into().unwrap()])
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, HHDEMOGUEST_ELF).unwrap();

    // ================ End Proving ================

    let duration = now.elapsed();
    println!("Time taken for proof: {:?}", duration);

    // ================ End timer ================

    println!("Proof generated successfully!");

    println!("================================");
    println!("== Proof is given to verifier.==");
    println!("================================");
    println!("Abstracting Journal Data from the receipt...");
    println!("===");

    // extract the receipt.
    let receipt = prove_info.receipt;

    let bytes = bincode::serialize(&receipt).unwrap();
    let location = "receipt.bin";
    println!("Saving receipt to {location}...");
    std::fs::write(location, &bytes).unwrap();
    println!("Receipt saved to {location}");

    let journal_data: PublicJournalData = receipt.journal.decode().unwrap();
    let flag = journal_data.flag;
    let day = journal_data.day;
    let month = journal_data.month;
    let year = journal_data.year;

    if flag {
        println!("You are 18 years old or older.");
    } else {
        println!("You are younger than 18.");
    }

    println!(
        "Proof was generated on the date: {}-{}-{}",
        day, month, year
    );
    println!("===");
    println!("================================");
    println!("==== Verifying the receipt...===");
    // Will crash if the receipt is invalid.
    println!("HHDEMOGUEST_ID: {:?}", HHDEMOGUEST_ID);
    receipt.verify(HHDEMOGUEST_ID).unwrap();
    println!("Receipt is valid!");
    println!("================================");

    use risc0_zkvm::Receipt;
    use std::fs;
    let bytes = fs::read("receipt.bin").expect("Failed to read receipt.bin file");
    // Deserialize using bincode
    let receipt: Receipt = bincode::deserialize(&bytes).expect("Failed to deserialize receipt");
    receipt.verify(HHDEMOGUEST_ID).unwrap();
    println!("Receipt.bin is valid!");
}

fn read_line() -> String {
    let mut input = String::new();
    std::io::stdin()
        .read_line(&mut input)
        .expect("Failed to read line");
    input.trim().to_string()
}
